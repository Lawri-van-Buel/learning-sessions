events {
  worker_connections 128;
}

http {

  lua_package_path '~/lua/?.lua;;';

  resolver 8.8.8.8;

  # cache for discovery metadata documents
  lua_shared_dict discovery 1m;

  # cache for sessions
  lua_shared_dict sessions 10m;

server {
  listen 8080;
  root /srv;
  location / {
    try_files $uri $uri/index.html =404;
  }
}

  server {
    listen 8082;

    # https://github.com/pingidentity/lua-resty-openidc/issues/33
    # https://github.com/pingidentity/lua-resty-openidc/wiki
    set $session_storage shm;
    set $session_shm_store sessions;

    location /admin {

      access_by_lua '

          local opts = {
             -- the full redirect URI must be protected by this script and becomes:
             -- ngx.var.scheme.."://"..ngx.var.http_host..opts.redirect_uri_path
             -- unless the scheme is overridden using opts.redirect_uri_scheme or an X-Forwarded-Proto header in the incoming request
             redirect_uri_scheme = "http",
             redirect_uri_path = "/admin/redirect_uri",
             discovery = "https://kc.akvotest.org/auth/realms/akvo/.well-known/openid-configuration",
             client_id = "openresty",
             client_secret = "cbb77410-8736-4a15-b539-68cd38478610",
             --authorization_params = { hd="pingidentity.com" },
             scope = "openid email profile",
             --iat_slack = 600,
             --redirect_uri_scheme = "https",
             logout_path = "/logout",
             token_endpoint_auth_method = "client_secret_post",
             ssl_verify = "no"
          }

          local session = require "resty.session".open()

	  ngx.log(ngx.DEBUG, ">>> session.data.id_token: ", session.data.id_token)

          -- call authenticate for OpenID Connect user authentication
          local res, err = require("resty.openidc").authenticate(opts)

          if err then
            ngx.status = 500
            ngx.say(err)
            ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
          end

          -- at this point res is a Lua table with 3 keys:
          --   id_token    : a Lua table with the claims from the id_token (required)
          --   access_token: the access token (optional)
          --   user        : a Lua table with the claims returned from the user info endpoint (optional)

          --if res.id_token.hd ~= "pingidentity.com" then
          --  ngx.exit(ngx.HTTP_FORBIDDEN)
          --end

          if res.user.email ~= "ivan@akvo.org" then
            ngx.exit(ngx.HTTP_FORBIDDEN)
          end

          -- set headers with user info (overwriting any existing!)
          ngx.req.set_header("X-USER", res.id_token.sub)
      ';

     proxy_pass http://localhost:8080/;
    }
  }
}